name: java-test

on: push

jobs:
  test:
    permissions:
      actions: write  # for styfle/cancel-workflow-action to cancel/stop running workflows
      contents: read  # for actions/checkout to fetch code
    name: "${{ matrix.root-pom }} on JDK ${{ matrix.java }} for the classifier ${{ matrix.classifier }}"
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            classifier: linux-x86_64
            java: 8
            root-pom: 'pom.xml'
          - os: ubuntu-latest
            classifier: linux-aarch_64
            java: 8
            root-pom: 'pom.xml'
          - os: windows-latest
            classifier: windows-x86_64
            java: 8
            root-pom: 'pom.xml'
          - os: macos-latest
            classifier: osx-x86_64
            java: 8
            root-pom: 'pom.xml'
          - os: macos-latest
            classifier: osx-aarch_64
            java: 8
            root-pom: 'pom.xml'
    runs-on: ${{ matrix.os }}
    env:
      ROOT_POM: ${{ matrix.root-pom }}
    steps:
      - uses: actions/checkout@v4

      - name: 'Set up JDK ${{ matrix.java }}'
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2
        with:
          java-version: ${{ matrix.java }}
          distribution: 'zulu'
          cache: 'maven'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install rust nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.77
          override: true
          components: clippy, rustfmt

      - name: 'Test'
        shell: bash
        working-directory: java
        run: gcc --version

      - name: Setup linux-aarch_64 rust target
        if: "contains(matrix.classifier, 'linux-aarch_64')"
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          # Setup for cargo
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: 'Test'
        shell: bash
        working-directory: java
        run: |
          export CFLAGS="$CFLAGS -include ../.github/centos7/force_link_glibc_2.17.h" && \
          export CXXFLAGS="$CXXFLAGS -include ../.github/centos7/force_link_glibc_2.17.h" && \
          make test

      - name: 'Build and Deploy'
        shell: bash
        working-directory: java
        run: |
            export CFLAGS="$CFLAGS -include ../.github/centos7/force_link_glibc_2.17.h" && \
            export CXXFLAGS="$CXXFLAGS -include ../.github/centos7/force_link_glibc_2.17.h" && \
            mvn clean package -DskipTests=true -Djni.classifier=${{ matrix.classifier }} -Dcargo-build.profile=release

      - name: 'Upload artifact'
        uses: actions/upload-artifact@v3
        with:
          name: kcl-lib-${{ matrix.classifier }}
          path: |
            java/target/classes/native
  
  build-on-centos:
    name: Build on CentOS 7
    runs-on: ubuntu-latest
    container:
      image: "centos:7"

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Prepare build environment
      run: |
        yum makecache
        yum install -y centos-release-scl-rh centos-release-scl
        yum install -y devtoolset-10-gcc devtoolset-10-gcc-c++ devtoolset-10-make
        yum install -y wget
        yum install -y make
        yum install -y epel-release
        yum install -y llvm clang llvm-devel
        source /opt/rh/devtoolset-10/enable
        cat /etc/os-release

    - name: Install Python 3
      run: |
        yum install -y python3 python3-devel python3-pip
    
    - name: Install Rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        mv $HOME/.cargo/bin/* /usr/bin/
        rustc --version
        cargo --version

    - name: Install Java and Maven
      run: |
        yum install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel
        wget https://repo.huaweicloud.com/apache/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz
        tar -xzf apache-maven-*.tar.gz
        mkdir p /opt/maven
        mv apache-maven-* /opt/maven
        ln -s /opt/maven/apache-maven-3.9.6/bin/mvn /usr/bin/mvn
        mvn --version

    - name: Verify installed versions
      run: |
        llvm-config --version
        python3 --version
        rustc --version
        mvn --version
        cat /etc/os-release

    - name: 'Test'
      shell: bash
      working-directory: java
      run: |
        source /opt/rh/devtoolset-10/enable && \
        export CFLAGS="$CFLAGS -include ../.github/centos7/force_link_glibc_2.17.h" && \
        export CXXFLAGS="$CXXFLAGS -include ../.github/centos7/force_link_glibc_2.17.h" && \
        gcc --version && \
        make test

    - name: 'Build and Deploy'
      shell: bash
      working-directory: java
      run: |
        source /opt/rh/devtoolset-10/enable && \
        export CFLAGS="$CFLAGS -include ../.github/centos7/force_link_glibc_2.17.h" && \
        export CXXFLAGS="$CXXFLAGS -include ../.github/centos7/force_link_glibc_2.17.h" && \
        gcc --version && \
        mvn clean package -DskipTests=true -Djni.classifier=linux-x86_64 -Dcargo-build.profile=release

    - name: 'Upload artifact'
      uses: actions/upload-artifact@v3
      with:
        name: kcl-lib-linux-x86_64-c
        path: java/target/classes/native

        
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [ test, build-on-centos ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Download windows x86_64 lib
        uses: actions/download-artifact@v3
        with:
          name: kcl-lib-windows-x86_64
          path: java/native

      - name: Download linux x86_64 lib
        uses: actions/download-artifact@v3
        with:
          name: kcl-lib-linux-x86_64
          path: java/native

      - name: Download linux aarch_64 lib
        uses: actions/download-artifact@v3
        with:
          name: kcl-lib-linux-aarch_64
          path: java/native

      - name: Download darwin x86_64 lib
        uses: actions/download-artifact@v3
        with:
          name: kcl-lib-osx-x86_64
          path: java/native

      - name: Download darwin aarch_64 lib
        uses: actions/download-artifact@v3
        with:
          name: kcl-lib-osx-aarch_64
          path: java/native

      - name: Package Java artifact
        working-directory: java
        run: |
          mvn clean package -DskipTests=true

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: kcl-lib
          path: java/target/*.jar

      # - name: Deploy to Github Packages
      #   working-directory: java
      #   run: |
      #     mvn clean package deploy \
      #       -DskipTests=true \
      #       -Dcargo-build.profile=release \
      #       -DserverId=github \
      #       -s $GITHUB_WORKSPACE/settings.xml
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
